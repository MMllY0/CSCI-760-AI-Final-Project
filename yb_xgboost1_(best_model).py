# -*- coding: utf-8 -*-
"""YB_Xgboost1 (Best Model).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GPQEA2qwB-e_DRKP1v7DvBlbhdKCOySE
"""

pip install tensorflow

import numpy as np
import pandas as pd
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from tensorflow.keras.layers import GRU, Dense, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

from google.colab import drive
drive.mount('/content/drive')

np.random.seed(0)
dates = pd.date_range(start='1/1/2020', periods=100, freq='D')
data_path = r'/content/drive/MyDrive/BTC_5min.txt'

# Manually specify the column names since the file does not contain headers.
column_names = ['Timestamp', 'Open', 'High', 'Low', 'Close', 'Volume']
df = pd.read_csv(data_path, header=None, names=column_names, index_col='Timestamp', parse_dates=True)
df = df.iloc[:100]  # Adjust the size of the sample data
df.index = dates  # Set the date index

"""# GPU"""

# Create a target variable (whether the 'Close' price will rise).
df['Target'] = (df['Close'].shift(-1) > df['Close']).astype(int)
df.dropna(inplace=True)  # Drop the last row because of NaN values

# Prepare data for the GRU model
window_size = 10  # Window size for the time series data
features = ['Open', 'High', 'Low', 'Close', 'Volume']
X = []
y = []
for i in range(window_size, len(df)):
    X.append(df[features].iloc[i-window_size:i].values)
    y.append(df['Target'].iloc[i])

X, y = np.array(X), np.array(y)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Configure the GRU model
gru_model = Sequential([
    GRU(50, return_sequences=True, input_shape=(window_size, len(features))),
    GRU(50),
    Dense(1, activation='sigmoid')
])

gru_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
gru_model.fit(X_train, y_train, epochs=30, batch_size=64, verbose=1)

# Feature extraction
feature_model = Sequential(gru_model.layers[:-1])
X_train_features = feature_model.predict(X_train)
X_test_features = feature_model.predict(X_test)

"""#XGBoost"""

# Train the XGBoost classifier
xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb_model.fit(X_train_features, y_train)

# Prediction and evaluation
y_pred = xgb_model.predict(X_test_features)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Print predictions and actual values
print("Predictions:", y_pred)
print("Actual:", y_test)

import matplotlib.pyplot as plt

# Plot the 'Close' price of the DataFrame.
plt.figure(figsize=(12, 6))
plt.plot(df.index, df['Close'], label='Close Price', color='blue')
plt.title('AAPL Close Price')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()